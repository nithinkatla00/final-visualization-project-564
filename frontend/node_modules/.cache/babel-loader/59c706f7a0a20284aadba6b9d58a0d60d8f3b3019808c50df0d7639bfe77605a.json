{"ast":null,"code":"import enclose from \"./enclose\";\nfunction place(a, b, c) {\n  var ax = a.x,\n    ay = a.y,\n    da = b.r + c.r,\n    db = a.r + c.r,\n    dx = b.x - ax,\n    dy = b.y - ay,\n    dc = dx * dx + dy * dy;\n  if (dc) {\n    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n      y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n    c.x = ax + x * dx + y * dy;\n    c.y = ay + x * dy - y * dx;\n  } else {\n    c.x = ax + db;\n    c.y = ay;\n  }\n}\nfunction intersects(a, b) {\n  var dx = b.x - a.x,\n    dy = b.y - a.y,\n    dr = a.r + b.r;\n  return dr * dr - 1e-6 > dx * dx + dy * dy;\n}\nfunction score(node) {\n  var a = node._,\n    b = node.next._,\n    ab = a.r + b.r,\n    dx = (a.x * b.r + b.x * a.r) / ab,\n    dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\nfunction Node(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\nexport function packEnclose(circles) {\n  if (!(n = circles.length)) return 0;\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node(a), b = new Node(b), c = new Node(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b;\n  while ((c = c.next) !== b) a.push(c._);\n  c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n  return c.r;\n}\nexport default function (circles) {\n  packEnclose(circles);\n  return circles;\n}","map":{"version":3,"names":["enclose","place","a","b","c","ax","x","ay","y","da","r","db","dx","dy","dc","Math","sqrt","max","intersects","dr","score","node","_","next","ab","Node","circle","previous","packEnclose","circles","n","length","aa","ca","i","j","k","sj","sk","pack","push"],"sources":["/Users/nithinkatla00/My-projects/Viz-project/frontend/node_modules/d3-hierarchy/src/pack/siblings.js"],"sourcesContent":["import enclose from \"./enclose\";\n\nfunction place(a, b, c) {\n  var ax = a.x,\n      ay = a.y,\n      da = b.r + c.r,\n      db = a.r + c.r,\n      dx = b.x - ax,\n      dy = b.y - ay,\n      dc = dx * dx + dy * dy;\n  if (dc) {\n    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),\n        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);\n    c.x = ax + x * dx + y * dy;\n    c.y = ay + x * dy - y * dx;\n  } else {\n    c.x = ax + db;\n    c.y = ay;\n  }\n}\n\nfunction intersects(a, b) {\n  var dx = b.x - a.x,\n      dy = b.y - a.y,\n      dr = a.r + b.r;\n  return dr * dr - 1e-6 > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nexport function packEnclose(circles) {\n  if (!(n = circles.length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node(a), b = new Node(b), c = new Node(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle…\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // “Closeness” is determined by linear distance along the front-chain.\n    // “Ahead” or “behind” is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nexport default function(circles) {\n  packEnclose(circles);\n  return circles;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}