{"ast":null,"code":"import formatTypes from \"./formatTypes\";\n\n// [[fill]align][sign][symbol][0][width][,][.precision][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match,\n    fill = match[1] || \" \",\n    align = match[2] || \">\",\n    sign = match[3] || \"-\",\n    symbol = match[4] || \"\",\n    zero = !!match[5],\n    width = match[6] && +match[6],\n    comma = !!match[7],\n    precision = match[8] && +match[8].slice(1),\n    type = match[9] || \"\";\n\n  // The \"n\" type is an alias for \",g\".\n  if (type === \"n\") comma = true, type = \"g\";\n\n  // Map invalid types to the default format.\n  else if (!formatTypes[type]) type = \"\";\n\n  // If zero fill is specified, padding goes after sign and before digits.\n  if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\";\n  this.fill = fill;\n  this.align = align;\n  this.sign = sign;\n  this.symbol = symbol;\n  this.zero = zero;\n  this.width = width;\n  this.comma = comma;\n  this.precision = precision;\n  this.type = type;\n}\nFormatSpecifier.prototype.toString = function () {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width == null ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0)) + this.type;\n};","map":{"version":3,"names":["formatTypes","re","formatSpecifier","specifier","FormatSpecifier","prototype","match","exec","Error","fill","align","sign","symbol","zero","width","comma","precision","slice","type","toString","Math","max"],"sources":["/Users/nithinkatla00/My-projects/Viz-project/frontend/node_modules/d3-format/src/formatSpecifier.js"],"sourcesContent":["import formatTypes from \"./formatTypes\";\n\n// [[fill]align][sign][symbol][0][width][,][.precision][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n  var match,\n      fill = match[1] || \" \",\n      align = match[2] || \">\",\n      sign = match[3] || \"-\",\n      symbol = match[4] || \"\",\n      zero = !!match[5],\n      width = match[6] && +match[6],\n      comma = !!match[7],\n      precision = match[8] && +match[8].slice(1),\n      type = match[9] || \"\";\n\n  // The \"n\" type is an alias for \",g\".\n  if (type === \"n\") comma = true, type = \"g\";\n\n  // Map invalid types to the default format.\n  else if (!formatTypes[type]) type = \"\";\n\n  // If zero fill is specified, padding goes after sign and before digits.\n  if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n  this.fill = fill;\n  this.align = align;\n  this.sign = sign;\n  this.symbol = symbol;\n  this.zero = zero;\n  this.width = width;\n  this.comma = comma;\n  this.precision = precision;\n  this.type = type;\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + this.type;\n};\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,eAAe;;AAEvC;AACA,IAAIC,EAAE,GAAG,uEAAuE;AAEhF,eAAe,SAASC,eAAeA,CAACC,SAAS,EAAE;EACjD,OAAO,IAAIC,eAAe,CAACD,SAAS,CAAC;AACvC;AAEAD,eAAe,CAACG,SAAS,GAAGD,eAAe,CAACC,SAAS,CAAC,CAAC;;AAEvD,SAASD,eAAeA,CAACD,SAAS,EAAE;EAClC,IAAI,EAAEG,KAAK,GAAGL,EAAE,CAACM,IAAI,CAACJ,SAAS,CAAC,CAAC,EAAE,MAAM,IAAIK,KAAK,CAAC,kBAAkB,GAAGL,SAAS,CAAC;EAElF,IAAIG,KAAK;IACLG,IAAI,GAAGH,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG;IACtBI,KAAK,GAAGJ,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG;IACvBK,IAAI,GAAGL,KAAK,CAAC,CAAC,CAAC,IAAI,GAAG;IACtBM,MAAM,GAAGN,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;IACvBO,IAAI,GAAG,CAAC,CAACP,KAAK,CAAC,CAAC,CAAC;IACjBQ,KAAK,GAAGR,KAAK,CAAC,CAAC,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC;IAC7BS,KAAK,GAAG,CAAC,CAACT,KAAK,CAAC,CAAC,CAAC;IAClBU,SAAS,GAAGV,KAAK,CAAC,CAAC,CAAC,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,CAACW,KAAK,CAAC,CAAC,CAAC;IAC1CC,IAAI,GAAGZ,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;;EAEzB;EACA,IAAIY,IAAI,KAAK,GAAG,EAAEH,KAAK,GAAG,IAAI,EAAEG,IAAI,GAAG,GAAG;;EAE1C;EAAA,KACK,IAAI,CAAClB,WAAW,CAACkB,IAAI,CAAC,EAAEA,IAAI,GAAG,EAAE;;EAEtC;EACA,IAAIL,IAAI,IAAKJ,IAAI,KAAK,GAAG,IAAIC,KAAK,KAAK,GAAI,EAAEG,IAAI,GAAG,IAAI,EAAEJ,IAAI,GAAG,GAAG,EAAEC,KAAK,GAAG,GAAG;EAEjF,IAAI,CAACD,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;EAClB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACE,IAAI,GAAGA,IAAI;AAClB;AAEAd,eAAe,CAACC,SAAS,CAACc,QAAQ,GAAG,YAAW;EAC9C,OAAO,IAAI,CAACV,IAAI,GACV,IAAI,CAACC,KAAK,GACV,IAAI,CAACC,IAAI,GACT,IAAI,CAACC,MAAM,IACV,IAAI,CAACC,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,IACrB,IAAI,CAACC,KAAK,IAAI,IAAI,GAAG,EAAE,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACP,KAAK,GAAG,CAAC,CAAC,CAAC,IACtD,IAAI,CAACC,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,IACtB,IAAI,CAACC,SAAS,IAAI,IAAI,GAAG,EAAE,GAAG,GAAG,GAAGI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACL,SAAS,GAAG,CAAC,CAAC,CAAC,GACrE,IAAI,CAACE,IAAI;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}