{"ast":null,"code":"import * as d3 from \"d3\";\nfunction purifyString(str) {\n  var regex = /\\s*\\[[^\\]]*\\]\\s*/g;\n  return str.replace(regex, \"\");\n}\nconst data = [{\n  text: \">7\",\n  color: \"green\"\n}, {\n  text: \"5-7\",\n  color: \"yellow\"\n}, {\n  text: \"1-5\",\n  color: \"orange\"\n}, {\n  text: \"<1\",\n  color: \"red\"\n}];\nexport function createWorldMap({\n  selected_year,\n  selectedCountry,\n  handleCountryChange\n}) {\n  var svg = d3.select(\"#world_map\"),\n    width = +svg.attr(\"width\"),\n    height = +svg.attr(\"height\");\n\n  // Increase map scale\n  var scale = 110;\n  var Tooltip = d3.select(\"#world_map\").append(\"div\").style(\"opacity\", 0).attr(\"class\", \"tooltip\").style(\"background-color\", \"white\").style(\"border\", \"solid\").style(\"border-width\", \"2px\").style(\"border-radius\", \"5px\").style(\"padding\", \"5px\");\n\n  // Define map projection\n  var projection = d3.geoMercator().scale(scale).center([0, 20]).translate([width / 2, height / 2]);\n\n  // Define path generator\n  var path = d3.geoPath().projection(projection);\n\n  // Define color scale with the desired ranges\n  var colorScale = d3.scaleThreshold().domain([4, 5, 7]) // Adjusted domain\n  .range([\"red\", \"orange\", \"yellow\", \"green\"]);\n  var happinessScoreMap;\n  var countryCodes;\n  d3.queue().defer(d3.json, process.env.PUBLIC_URL + \"/data/world_countries.json\").defer(d3.csv, process.env.PUBLIC_URL + \"/data/country-codes.csv\").defer(d3.csv, process.env.PUBLIC_URL + \"/data/sustainable-score-\" + selected_year + \".csv\").await(createMap);\n  function createMap(error, topo, codes, score) {\n    if (error) throw error;\n    happinessScoreMap = new Map(score.map(d => [d.country, +d.happiness_score]));\n    countryCodes = new Map(codes.map(x => [x.alpha3, x.country]));\n    svg.selectAll(\"path\").data(topo.features).enter().append(\"path\").attr(\"d\", path).attr(\"fill\", function (t) {\n      var countryCode = t.id;\n      var countryName = countryCodes.get(countryCode) || \"\";\n      var happinessScore = happinessScoreMap.get(purifyString(countryName)) || 5;\n      return colorScale(happinessScore);\n    }).style(\"stroke-width\", 2).style(\"stroke\", \"white\").style(\"opacity\", 0.8).on(\"mouseover\", mouseover).on(\"mousemove\", mousemove).on(\"mouseleave\", mouseleave).on(\"click\", mouseclick);\n\n    // Add country labels\n    // svg\n    //   .selectAll(\".country-label\")\n    //   .data(topo.features)\n    //   .enter()\n    //   .append(\"text\")\n    //   .attr(\"class\", \"country-label\")\n    //   .attr(\"x\", function (d) {\n    //     return path.centroid(d)[0];\n    //   })\n    //   .attr(\"y\", function (d) {\n    //     return path.centroid(d)[1];\n    //   })\n    //   .attr(\"text-anchor\", \"middle\")\n    //   .attr(\"alignment-baseline\", \"middle\")\n    //   .style(\"font-size\", \"6px\")\n    //   .style(\"fill\", \"black\")\n    //   .text(function (d) {\n    //     var countryCode = d.id;\n    //     return countryCodes.get(countryCode) || \"\";\n    //   });\n  }\n  let xPos = 720;\n  const yPosStart = 10;\n  const yPosStep = 20;\n\n  // Append rectangles and texts dynamically\n  data.forEach((d, i) => {\n    // Append rectangle\n    svg.append(\"rect\").attr(\"x\", xPos).attr(\"y\", yPosStart + i * yPosStep).attr(\"width\", 20).attr(\"height\", 10).style(\"fill\", d.color);\n\n    // Append text\n    svg.append(\"text\").transition().duration(1000).attr(\"x\", xPos + 30) // Place text next to the rectangle\n    .attr(\"y\", yPosStart + i * yPosStep + 5) // Center text vertically\n    .text(d.text).style(\"fill\", \"black\").style(\"font-size\", \"13px\").style(\"font-family\", \"Verdana, sans-serif\").attr(\"alignment-baseline\", \"middle\");\n  });\n  var mouseover = function (d) {\n    Tooltip.style(\"opacity\", 1);\n    d3.select(this).style(\"stroke\", \"black\").style(\"opacity\", 1);\n    var countryCode = d.id;\n    var countryName = countryCodes.get(countryCode) || \"\";\n    Tooltip.html(\"<strong>\" + countryName + \"</strong>\").style(\"left\", d3.event.pageX + 10 + \"px\").style(\"top\", d3.event.pageY + 10 + \"px\");\n  };\n  var mousemove = function () {\n    Tooltip.style(\"left\", d3.event.pageX + 10 + \"px\").style(\"top\", d3.event.pageY + 10 + \"px\");\n  };\n  var mouseleave = function () {\n    Tooltip.style(\"opacity\", 0);\n    d3.select(this).style(\"stroke\", \"none\").style(\"opacity\", 0.8);\n  };\n  var mouseclick = function (d) {\n    var countryCode = d.id;\n    var countryName = countryCodes.get(countryCode) || \"\";\n    handleCountryChange(countryName);\n  };\n  svg.on(\"mouseout\", function () {\n    Tooltip.style(\"opacity\", 0);\n  });\n}","map":{"version":3,"names":["d3","purifyString","str","regex","replace","data","text","color","createWorldMap","selected_year","selectedCountry","handleCountryChange","svg","select","width","attr","height","scale","Tooltip","append","style","projection","geoMercator","center","translate","path","geoPath","colorScale","scaleThreshold","domain","range","happinessScoreMap","countryCodes","queue","defer","json","process","env","PUBLIC_URL","csv","await","createMap","error","topo","codes","score","Map","map","d","country","happiness_score","x","alpha3","selectAll","features","enter","t","countryCode","id","countryName","get","happinessScore","on","mouseover","mousemove","mouseleave","mouseclick","xPos","yPosStart","yPosStep","forEach","i","transition","duration","html","event","pageX","pageY"],"sources":["/Users/nithinkatla00/My-projects/Viz-project/frontend/src/utils/worldMap.js"],"sourcesContent":["import * as d3 from \"d3\";\n\nfunction purifyString(str) {\n  var regex = /\\s*\\[[^\\]]*\\]\\s*/g;\n  return str.replace(regex, \"\");\n}\n\nconst data = [\n  { text: \">7\", color: \"green\" },\n  { text: \"5-7\", color: \"yellow\" },\n  { text: \"1-5\", color: \"orange\" },\n  { text: \"<1\", color: \"red\" }\n];\n\nexport function createWorldMap({\n  selected_year,\n  selectedCountry,\n  handleCountryChange\n}) {\n  var svg = d3.select(\"#world_map\"),\n    width = +svg.attr(\"width\"),\n    height = +svg.attr(\"height\");\n\n  // Increase map scale\n  var scale = 110;\n\n  var Tooltip = d3\n    .select(\"#world_map\")\n    .append(\"div\")\n    .style(\"opacity\", 0)\n    .attr(\"class\", \"tooltip\")\n    .style(\"background-color\", \"white\")\n    .style(\"border\", \"solid\")\n    .style(\"border-width\", \"2px\")\n    .style(\"border-radius\", \"5px\")\n    .style(\"padding\", \"5px\");\n\n  // Define map projection\n  var projection = d3\n    .geoMercator()\n    .scale(scale)\n    .center([0, 20])\n    .translate([width / 2, height / 2]);\n\n  // Define path generator\n  var path = d3.geoPath().projection(projection);\n\n  // Define color scale with the desired ranges\n  var colorScale = d3\n    .scaleThreshold()\n    .domain([4, 5, 7]) // Adjusted domain\n    .range([\"red\", \"orange\", \"yellow\", \"green\"]);\n\n  var happinessScoreMap;\n  var countryCodes;\n\n  d3.queue()\n    .defer(d3.json, process.env.PUBLIC_URL + \"/data/world_countries.json\")\n    .defer(d3.csv, process.env.PUBLIC_URL + \"/data/country-codes.csv\")\n    .defer(\n      d3.csv,\n      process.env.PUBLIC_URL +\n        \"/data/sustainable-score-\" +\n        selected_year +\n        \".csv\"\n    )\n    .await(createMap);\n\n  function createMap(error, topo, codes, score) {\n    if (error) throw error;\n\n    happinessScoreMap = new Map(\n      score.map((d) => [d.country, +d.happiness_score])\n    );\n\n    countryCodes = new Map(codes.map((x) => [x.alpha3, x.country]));\n\n    svg\n      .selectAll(\"path\")\n      .data(topo.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .attr(\"fill\", function (t) {\n        var countryCode = t.id;\n        var countryName = countryCodes.get(countryCode) || \"\";\n        var happinessScore =\n          happinessScoreMap.get(purifyString(countryName)) || 5;\n        return colorScale(happinessScore);\n      })\n      .style(\"stroke-width\", 2)\n      .style(\"stroke\", \"white\")\n      .style(\"opacity\", 0.8)\n      .on(\"mouseover\", mouseover)\n      .on(\"mousemove\", mousemove)\n      .on(\"mouseleave\", mouseleave)\n      .on(\"click\", mouseclick);\n\n    // Add country labels\n    // svg\n    //   .selectAll(\".country-label\")\n    //   .data(topo.features)\n    //   .enter()\n    //   .append(\"text\")\n    //   .attr(\"class\", \"country-label\")\n    //   .attr(\"x\", function (d) {\n    //     return path.centroid(d)[0];\n    //   })\n    //   .attr(\"y\", function (d) {\n    //     return path.centroid(d)[1];\n    //   })\n    //   .attr(\"text-anchor\", \"middle\")\n    //   .attr(\"alignment-baseline\", \"middle\")\n    //   .style(\"font-size\", \"6px\")\n    //   .style(\"fill\", \"black\")\n    //   .text(function (d) {\n    //     var countryCode = d.id;\n    //     return countryCodes.get(countryCode) || \"\";\n    //   });\n  }\n\n  let xPos = 720;\n  const yPosStart = 10;\n  const yPosStep = 20;\n\n  // Append rectangles and texts dynamically\n  data.forEach((d, i) => {\n    // Append rectangle\n    svg\n      .append(\"rect\")\n      .attr(\"x\", xPos)\n      .attr(\"y\", yPosStart + i * yPosStep)\n      .attr(\"width\", 20)\n      .attr(\"height\", 10)\n      .style(\"fill\", d.color);\n\n    // Append text\n    svg\n      .append(\"text\")\n      .transition()\n      .duration(1000)\n      .attr(\"x\", xPos + 30) // Place text next to the rectangle\n      .attr(\"y\", yPosStart + i * yPosStep + 5) // Center text vertically\n      .text(d.text)\n      .style(\"fill\", \"black\")\n      .style(\"font-size\", \"13px\")\n      .style(\"font-family\", \"Verdana, sans-serif\")\n      .attr(\"alignment-baseline\", \"middle\");\n  });\n\n  var mouseover = function (d) {\n    Tooltip.style(\"opacity\", 1);\n    d3.select(this).style(\"stroke\", \"black\").style(\"opacity\", 1);\n    var countryCode = d.id;\n    var countryName = countryCodes.get(countryCode) || \"\";\n    Tooltip.html(\"<strong>\" + countryName + \"</strong>\")\n      .style(\"left\", d3.event.pageX + 10 + \"px\")\n      .style(\"top\", d3.event.pageY + 10 + \"px\");\n  };\n\n  var mousemove = function () {\n    Tooltip.style(\"left\", d3.event.pageX + 10 + \"px\").style(\n      \"top\",\n      d3.event.pageY + 10 + \"px\"\n    );\n  };\n\n  var mouseleave = function () {\n    Tooltip.style(\"opacity\", 0);\n    d3.select(this).style(\"stroke\", \"none\").style(\"opacity\", 0.8);\n  };\n\n  var mouseclick = function (d) {\n    var countryCode = d.id;\n    var countryName = countryCodes.get(countryCode) || \"\";\n    handleCountryChange(countryName);\n  };\n\n  svg.on(\"mouseout\", function () {\n    Tooltip.style(\"opacity\", 0);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}