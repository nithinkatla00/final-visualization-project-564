{"ast":null,"code":"import * as d3 from \"d3\";\nimport { schemeSet2 } from \"d3-scale-chromatic\";\nexport function Svg_Line_Graph({\n  data\n}) {\n  var margin = {\n      top: 10,\n      right: 100,\n      bottom: 30,\n      left: 30\n    },\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n  // append the svg object to the body of the page\n  var svg = d3.select(\"#line_graph\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // List of groups (here I have one group per column)\n  var allGroup = [\"sustainable_index_score\", \"happiness_score\", \"no_poverty_score\", \"zero_hunger_score\", \"good_health_score\", \"quality_education_score\", \"gender_equality_score\", \"clean_water_sanitation_score\", \"gdp_per_capita\", \"social_support\", \"healthy_life_expectancy\", \"freedom_to_make_life_choices\", \"generosity\", \"perceptions_of_corruption\"];\n\n  // add the options to the button\n  d3.select(\"#selectButton\").selectAll(\"myOptions\").data(allGroup).enter().append(\"option\").text(function (d) {\n    return d;\n  }) // text showed in the menu\n  .attr(\"value\", function (d) {\n    return d;\n  });\n\n  // Reduce the width and height of the select element\n  d3.select(\"#selectButton\").style(\"width\", \"150px\") // Set width\n  .style(\"height\", \"20px\") // Set height\n  .style(\"margin-top\", margin.top + \"px\") // Adjust margin top\n  .style(\"margin-left\", margin.left + \"px\"); // Adjust margin left\n\n  // A color scale: one color for each group\n  var myColor = d3.scaleOrdinal().domain(allGroup).range(schemeSet2);\n\n  // Add X axis --> it is a date format\n  var x = d3.scaleLinear().domain([2016, 2023]).range([0, 1]);\n  svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n\n  // Add Y axis\n  var y = d3.scaleLinear().domain([0, 20]).range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y));\n\n  //   const selectedOption = d3.select(\"#selectButton\").property(\"value\");\n\n  // Initialize line with group a\n  //   var line = svg\n  //     .append(\"g\")\n  //     .append(\"path\")\n  //     .datum(data)\n  //     .attr(\n  //       \"d\",\n  //       d3\n  //         .line()\n  //         .x(function (d) {\n  //           return x(+d.time);\n  //         })\n  //         .y(function (d) {\n  //           return y(+d.valueA);\n  //         })\n  //     )\n  //     .attr(\"stroke\", function (d) {\n  //       return myColor(\"valueA\");\n  //     })\n  //     .style(\"stroke-width\", 4)\n  //     .style(\"fill\", \"none\");\n\n  //   // A function that update the chart\n  //   function update(selectedGroup) {\n  //     // Create new data with the selection?\n  //     var dataFilter = data.map(function (d) {\n  //       return { time: d.time, value: d[selectedGroup] };\n  //     });\n\n  //     // Give these new data to update line\n  //     line\n  //       .datum(dataFilter)\n  //       .transition()\n  //       .duration(1000)\n  //       .attr(\n  //         \"d\",\n  //         d3\n  //           .line()\n  //           .x(function (d) {\n  //             return x(+d.time);\n  //           })\n  //           .y(function (d) {\n  //             return y(+d.value);\n  //           })\n  //       )\n  //       .attr(\"stroke\", function (d) {\n  //         return myColor(selectedGroup);\n  //       });\n  //   }\n\n  //   // When the button is changed, run the updateChart function\n  //   d3.select(\"#selectButton\").on(\"change\", function (d) {\n  //     // recover the option that has been chosen\n  //     var selectedOption = d3.select(this).property(\"value\");\n  //     // run the updateChart function with this selected option\n  //     update(selectedOption);\n  //   });\n}\n_c = Svg_Line_Graph;\nvar _c;\n$RefreshReg$(_c, \"Svg_Line_Graph\");","map":{"version":3,"names":["d3","schemeSet2","Svg_Line_Graph","data","margin","top","right","bottom","left","width","height","svg","select","attr","append","allGroup","selectAll","enter","text","d","style","myColor","scaleOrdinal","domain","range","x","scaleLinear","call","axisBottom","y","axisLeft","_c","$RefreshReg$"],"sources":["/Users/nithinkatla00/My-projects/Viz-project/frontend/src/utils/svg-linegraph.js"],"sourcesContent":["import * as d3 from \"d3\";\nimport { schemeSet2 } from \"d3-scale-chromatic\";\n\nexport function Svg_Line_Graph({ data }) {\n  var margin = { top: 10, right: 100, bottom: 30, left: 30 },\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n  // append the svg object to the body of the page\n  var svg = d3\n    .select(\"#line_graph\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // List of groups (here I have one group per column)\n  var allGroup = [\n    \"sustainable_index_score\",\n    \"happiness_score\",\n    \"no_poverty_score\",\n    \"zero_hunger_score\",\n    \"good_health_score\",\n    \"quality_education_score\",\n    \"gender_equality_score\",\n    \"clean_water_sanitation_score\",\n    \"gdp_per_capita\",\n    \"social_support\",\n    \"healthy_life_expectancy\",\n    \"freedom_to_make_life_choices\",\n    \"generosity\",\n    \"perceptions_of_corruption\"\n  ];\n\n  // add the options to the button\n  d3.select(\"#selectButton\")\n    .selectAll(\"myOptions\")\n    .data(allGroup)\n    .enter()\n    .append(\"option\")\n    .text(function (d) {\n      return d;\n    }) // text showed in the menu\n    .attr(\"value\", function (d) {\n      return d;\n    });\n\n  // Reduce the width and height of the select element\n  d3.select(\"#selectButton\")\n    .style(\"width\", \"150px\") // Set width\n    .style(\"height\", \"20px\") // Set height\n    .style(\"margin-top\", margin.top + \"px\") // Adjust margin top\n    .style(\"margin-left\", margin.left + \"px\"); // Adjust margin left\n\n  // A color scale: one color for each group\n  var myColor = d3.scaleOrdinal().domain(allGroup).range(schemeSet2);\n\n  // Add X axis --> it is a date format\n  var x = d3.scaleLinear().domain([2016, 2023]).range([0, 1]);\n  svg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(d3.axisBottom(x));\n\n  // Add Y axis\n  var y = d3.scaleLinear().domain([0, 20]).range([height, 0]);\n  svg.append(\"g\").call(d3.axisLeft(y));\n\n  //   const selectedOption = d3.select(\"#selectButton\").property(\"value\");\n\n  // Initialize line with group a\n  //   var line = svg\n  //     .append(\"g\")\n  //     .append(\"path\")\n  //     .datum(data)\n  //     .attr(\n  //       \"d\",\n  //       d3\n  //         .line()\n  //         .x(function (d) {\n  //           return x(+d.time);\n  //         })\n  //         .y(function (d) {\n  //           return y(+d.valueA);\n  //         })\n  //     )\n  //     .attr(\"stroke\", function (d) {\n  //       return myColor(\"valueA\");\n  //     })\n  //     .style(\"stroke-width\", 4)\n  //     .style(\"fill\", \"none\");\n\n  //   // A function that update the chart\n  //   function update(selectedGroup) {\n  //     // Create new data with the selection?\n  //     var dataFilter = data.map(function (d) {\n  //       return { time: d.time, value: d[selectedGroup] };\n  //     });\n\n  //     // Give these new data to update line\n  //     line\n  //       .datum(dataFilter)\n  //       .transition()\n  //       .duration(1000)\n  //       .attr(\n  //         \"d\",\n  //         d3\n  //           .line()\n  //           .x(function (d) {\n  //             return x(+d.time);\n  //           })\n  //           .y(function (d) {\n  //             return y(+d.value);\n  //           })\n  //       )\n  //       .attr(\"stroke\", function (d) {\n  //         return myColor(selectedGroup);\n  //       });\n  //   }\n\n  //   // When the button is changed, run the updateChart function\n  //   d3.select(\"#selectButton\").on(\"change\", function (d) {\n  //     // recover the option that has been chosen\n  //     var selectedOption = d3.select(this).property(\"value\");\n  //     // run the updateChart function with this selected option\n  //     update(selectedOption);\n  //   });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}