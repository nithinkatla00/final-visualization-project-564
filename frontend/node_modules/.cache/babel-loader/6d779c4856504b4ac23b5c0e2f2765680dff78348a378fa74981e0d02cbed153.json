{"ast":null,"code":"import * as d3 from \"d3\";\nimport { schemeSet2 } from \"d3-scale-chromatic\";\nexport function Svg_Line_Graph({\n  data\n}) {\n  //   var margin = { top: 10, right: 100, bottom: 30, left: 30 },\n  //     width = 460 - margin.left - margin.right,\n  //     height = 400 - margin.top - margin.bottom;\n  //   // append the svg object to the body of the page\n  //   var svg = d3\n  //     .select(\"#line_graph\")\n  //     .attr(\"width\", width + margin.left + margin.right)\n  //     .attr(\"height\", height + margin.top + margin.bottom)\n  //     .append(\"g\")\n  //     .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  //   // List of groups (here I have one group per column)\n  //   var allGroup = [\n  //     \"sustainable_index_score\",\n  //     \"happiness_score\",\n  //     \"no_poverty_score\",\n  //     \"zero_hunger_score\",\n  //     \"good_health_score\",\n  //     \"quality_education_score\",\n  //     \"gender_equality_score\",\n  //     \"clean_water_sanitation_score\",\n  //     \"gdp_per_capita\",\n  //     \"social_support\",\n  //     \"healthy_life_expectancy\",\n  //     \"freedom_to_make_life_choices\",\n  //     \"generosity\",\n  //     \"perceptions_of_corruption\"\n  //   ];\n  //   // add the options to the button\n  //   var selectButton = d3\n  //     .select(\"#selectButton\")\n  //     .selectAll(\"myOptions\")\n  //     .data(allGroup)\n  //     .enter()\n  //     .append(\"option\")\n  //     .text(function (d) {\n  //       return d;\n  //     }) // text showed in the menu\n  //     .attr(\"value\", function (d) {\n  //       return d;\n  //     });\n  //   // Reduce the width and height of the select element\n  //   selectButton\n  //     .style(\"width\", \"150px\") // Set width\n  //     .style(\"height\", \"20px\") // Set height\n  //     .style(\"margin-top\", margin.top + \"px\") // Adjust margin top\n  //     .style(\"margin-left\", margin.left + \"px\"); // Adjust margin left\n  //   // A color scale: one color for each group\n  //   var myColor = d3.scaleOrdinal().domain(allGroup).range(schemeSet2);\n  //   // Add X axis\n  //   var x = d3.scaleLinear().domain([2016, 2023]).range([0, width]);\n  //   svg\n  //     .append(\"g\")\n  //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n  //     .call(\n  //       d3\n  //         .axisBottom(x)\n  //         .tickValues(d3.range(2016, 2024))\n  //         .tickFormat(d3.format(\"d\"))\n  //     ); // Generate ticks for every year from 2016 to 2023\n  //   // Add Y axis\n  //   var y = d3.scaleLinear().domain([0, 100]).range([height, 0]);\n  //   svg.append(\"g\").call(d3.axisLeft(y));\n  //   // Initialize line with group a\n  //   var line = svg\n  //     .append(\"g\")\n  //     .append(\"path\")\n  //     .datum(data)\n  //     .attr(\n  //       \"d\",\n  //       d3\n  //         .line()\n  //         .x(function (d) {\n  //           return x(+d.year);\n  //         })\n  //         .y(function (d) {\n  //           return y(+d.healthy_life_expectancy);\n  //         })\n  //     )\n  //     .attr(\"stroke\", function (d) {\n  //       return myColor(\"valueA\");\n  //     })\n  //     .style(\"stroke-width\", 4)\n  //     .style(\"fill\", \"none\");\n  //   // A function that update the chart\n  //   function update(selectedGroup) {\n  //     // Create new data with the selection?\n  //     var dataFilter = data.map(function (d) {\n  //       return { time: d.time, value: d[selectedGroup] };\n  //     });\n  //     // Give these new data to update line\n  //     line\n  //       .datum(dataFilter)\n  //       .transition()\n  //       .duration(1000)\n  //       .attr(\n  //         \"d\",\n  //         d3\n  //           .line()\n  //           .x(function (d) {\n  //             return x(+d.year);\n  //           })\n  //           .y(function (d) {\n  //             return y(+d.healthy_life_expectancy);\n  //           })\n  //       )\n  //       .attr(\"stroke\", function (d) {\n  //         return myColor(selectedGroup);\n  //       });\n  //   }\n  //   // When the button is changed, run the updateChart function\n  //   d3.select(\"#selectButton\").on(\"change\", function (d) {\n  //     // recover the option that has been chosen\n  //     var selectedOption = d3.select(this).property(\"value\");\n  //     // run the updateChart function with this selected option\n  //     update(selectedOption);\n  //   });\n}\n_c = Svg_Line_Graph;\nvar _c;\n$RefreshReg$(_c, \"Svg_Line_Graph\");","map":{"version":3,"names":["d3","schemeSet2","Svg_Line_Graph","data","_c","$RefreshReg$"],"sources":["/Users/nithinkatla00/My-projects/Viz-project/frontend/src/utils/svg-linegraph.js"],"sourcesContent":["import * as d3 from \"d3\";\nimport { schemeSet2 } from \"d3-scale-chromatic\";\n\nexport function Svg_Line_Graph({ data }) {\n  //   var margin = { top: 10, right: 100, bottom: 30, left: 30 },\n  //     width = 460 - margin.left - margin.right,\n  //     height = 400 - margin.top - margin.bottom;\n  //   // append the svg object to the body of the page\n  //   var svg = d3\n  //     .select(\"#line_graph\")\n  //     .attr(\"width\", width + margin.left + margin.right)\n  //     .attr(\"height\", height + margin.top + margin.bottom)\n  //     .append(\"g\")\n  //     .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  //   // List of groups (here I have one group per column)\n  //   var allGroup = [\n  //     \"sustainable_index_score\",\n  //     \"happiness_score\",\n  //     \"no_poverty_score\",\n  //     \"zero_hunger_score\",\n  //     \"good_health_score\",\n  //     \"quality_education_score\",\n  //     \"gender_equality_score\",\n  //     \"clean_water_sanitation_score\",\n  //     \"gdp_per_capita\",\n  //     \"social_support\",\n  //     \"healthy_life_expectancy\",\n  //     \"freedom_to_make_life_choices\",\n  //     \"generosity\",\n  //     \"perceptions_of_corruption\"\n  //   ];\n  //   // add the options to the button\n  //   var selectButton = d3\n  //     .select(\"#selectButton\")\n  //     .selectAll(\"myOptions\")\n  //     .data(allGroup)\n  //     .enter()\n  //     .append(\"option\")\n  //     .text(function (d) {\n  //       return d;\n  //     }) // text showed in the menu\n  //     .attr(\"value\", function (d) {\n  //       return d;\n  //     });\n  //   // Reduce the width and height of the select element\n  //   selectButton\n  //     .style(\"width\", \"150px\") // Set width\n  //     .style(\"height\", \"20px\") // Set height\n  //     .style(\"margin-top\", margin.top + \"px\") // Adjust margin top\n  //     .style(\"margin-left\", margin.left + \"px\"); // Adjust margin left\n  //   // A color scale: one color for each group\n  //   var myColor = d3.scaleOrdinal().domain(allGroup).range(schemeSet2);\n  //   // Add X axis\n  //   var x = d3.scaleLinear().domain([2016, 2023]).range([0, width]);\n  //   svg\n  //     .append(\"g\")\n  //     .attr(\"transform\", \"translate(0,\" + height + \")\")\n  //     .call(\n  //       d3\n  //         .axisBottom(x)\n  //         .tickValues(d3.range(2016, 2024))\n  //         .tickFormat(d3.format(\"d\"))\n  //     ); // Generate ticks for every year from 2016 to 2023\n  //   // Add Y axis\n  //   var y = d3.scaleLinear().domain([0, 100]).range([height, 0]);\n  //   svg.append(\"g\").call(d3.axisLeft(y));\n  //   // Initialize line with group a\n  //   var line = svg\n  //     .append(\"g\")\n  //     .append(\"path\")\n  //     .datum(data)\n  //     .attr(\n  //       \"d\",\n  //       d3\n  //         .line()\n  //         .x(function (d) {\n  //           return x(+d.year);\n  //         })\n  //         .y(function (d) {\n  //           return y(+d.healthy_life_expectancy);\n  //         })\n  //     )\n  //     .attr(\"stroke\", function (d) {\n  //       return myColor(\"valueA\");\n  //     })\n  //     .style(\"stroke-width\", 4)\n  //     .style(\"fill\", \"none\");\n  //   // A function that update the chart\n  //   function update(selectedGroup) {\n  //     // Create new data with the selection?\n  //     var dataFilter = data.map(function (d) {\n  //       return { time: d.time, value: d[selectedGroup] };\n  //     });\n  //     // Give these new data to update line\n  //     line\n  //       .datum(dataFilter)\n  //       .transition()\n  //       .duration(1000)\n  //       .attr(\n  //         \"d\",\n  //         d3\n  //           .line()\n  //           .x(function (d) {\n  //             return x(+d.year);\n  //           })\n  //           .y(function (d) {\n  //             return y(+d.healthy_life_expectancy);\n  //           })\n  //       )\n  //       .attr(\"stroke\", function (d) {\n  //         return myColor(selectedGroup);\n  //       });\n  //   }\n  //   // When the button is changed, run the updateChart function\n  //   d3.select(\"#selectButton\").on(\"change\", function (d) {\n  //     // recover the option that has been chosen\n  //     var selectedOption = d3.select(this).property(\"value\");\n  //     // run the updateChart function with this selected option\n  //     update(selectedOption);\n  //   });\n}\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,OAAO,SAASC,cAAcA,CAAC;EAAEC;AAAK,CAAC,EAAE;EACvrHeF,cAAc;AAAA,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}