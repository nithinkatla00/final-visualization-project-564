{"ast":null,"code":"var EOL = {},\n  EOF = {},\n  QUOTE = 34,\n  NEWLINE = 10,\n  RETURN = 13;\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function (name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function (row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n    columns = [];\n  rows.forEach(function (row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n  return columns;\n}\nexport default function (delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n    DELIMITER = delimiter.charCodeAt(0);\n  function parse(text, f) {\n    var convert,\n      columns,\n      rows = parseRows(text, function (row, i) {\n        if (convert) return convert(row, i - 1);\n        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n      });\n    rows.columns = columns || [];\n    return rows;\n  }\n  function parseRows(text, f) {\n    var rows = [],\n      // output rows\n      N = text.length,\n      I = 0,\n      // current character index\n      n = 0,\n      // current line number\n      t,\n      // current token\n      eof = N <= 0,\n      // current token followed by EOF?\n      eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i,\n        j = I,\n        c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n          eol = true;\n          if (text.charCodeAt(I) === NEWLINE) ++I;\n        }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n          eol = true;\n          if (text.charCodeAt(I) === NEWLINE) ++I;\n        } else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n    return rows;\n  }\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {\n      return columns.map(function (column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n  function formatValue(text) {\n    return text == null ? \"\" : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\" : text;\n  }\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}","map":{"version":3,"names":["EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","columns","Function","map","name","i","JSON","stringify","join","customConverter","f","object","row","inferColumns","rows","columnSet","Object","create","forEach","column","push","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parse","text","convert","parseRows","N","length","I","n","t","eof","eol","token","j","c","slice","replace","format","formatValue","concat","formatRows","formatRow","test"],"sources":["/Users/nithinkatla00/My-projects/Viz-project/frontend/node_modules/d3-dsv/src/dsv.js"],"sourcesContent":["var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}