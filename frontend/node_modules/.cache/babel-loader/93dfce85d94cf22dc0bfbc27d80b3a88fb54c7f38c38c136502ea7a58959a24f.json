{"ast":null,"code":"import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTypes from \"./formatTypes\";\nimport { prefixExponent } from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\nvar prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\nexport default function (locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n    currency = locale.currency,\n    decimal = locale.decimal,\n    numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n    percent = locale.percent || \"%\";\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n    var fill = specifier.fill,\n      align = specifier.align,\n      sign = specifier.sign,\n      symbol = specifier.symbol,\n      zero = specifier.zero,\n      width = specifier.width,\n      comma = specifier.comma,\n      precision = specifier.precision,\n      type = specifier.type;\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n      suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n      maybeSuffix = !type || /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n    function format(value) {\n      var valuePrefix = prefix,\n        valueSuffix = suffix,\n        i,\n        n,\n        c;\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : \"-\" : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n        padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n      return numerals(value);\n    }\n    format.toString = function () {\n      return specifier + \"\";\n    };\n    return format;\n  }\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n      e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n      k = Math.pow(10, -e),\n      prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}","map":{"version":3,"names":["exponent","formatGroup","formatNumerals","formatSpecifier","formatTypes","prefixExponent","identity","prefixes","locale","group","grouping","thousands","currency","decimal","numerals","percent","newFormat","specifier","fill","align","sign","symbol","zero","width","comma","precision","type","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","Math","max","min","format","value","valuePrefix","valueSuffix","i","n","c","valueNegative","abs","length","charCodeAt","slice","Infinity","padding","Array","join","toString","formatPrefix","f","e","floor","k","pow"],"sources":["/Users/nithinkatla00/My-projects/Viz-project/frontend/node_modules/d3-format/src/locale.js"],"sourcesContent":["import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTypes from \"./formatTypes\";\nimport {prefixExponent} from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        type = specifier.type;\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = !type || /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? (type ? 6 : 12)\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}